version: "3.4"
services:
  reverse-proxy:
    image: traefik:2.10
    command: --api.insecure=true --providers.docker=true --entrypoints.web.address=:80
    ports:
      - 8080:80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  mongodb:
    ## As of 2024-10-22 bitnami mongoDB still do not support ARM64
    ## Change back to bitnami/mongodb when it supports ARM64
    image: "mongo:latest" 
    ports:
      - "27017:27017"
    volumes:
      - "mongodb_data:/bitnami"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  backend:
    image: ghcr.io/scicatproject/backend-next:latest
    ports:
      - 3000:3000
    volumes:
      - "./CI/e2e/.env.backend.e2e:/home/node/app/.env"
      - "./CI/e2e/functionalAccounts.e2e.json:/home/node/app/functionalAccounts.json"
      - "./CI/e2e/proposalTypes.e2e.json:/home/node/app/proposalTypes.json"
      - "./CI/e2e/frontend.config.e2e.json:/home/node/app/dist/config/frontend.config.json"
    depends_on:
      mongodb:
        condition: service_healthy
      es01:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v3/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - "traefik.http.routers.backend.rule=PathPrefix(`/api/v3`, `/auth/msad`)"
      - "traefik.http.routers.backend.entrypoints=web"
  frontend:
    build:
      context: .
    ports:
      - 4200:8080
    volumes:
      - "./CI/e2e/frontend.config.e2e.json:/usr/share/nginx/html/assets/config.json"
    depends_on:
      - backend
    labels:
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.routers.frontend.entrypoints=web"
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.2
    ports:
      - 9200:9200
    environment:
      - xpack.security.enabled=false
      - node.name=es01
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - ES_PASSWORD=password
      - cluster.name=es-cluster
      - cluster.initial_master_nodes=es01
      - discovery.seed_hosts=es01
      - cluster.routing.allocation.disk.threshold_enabled=false
      - bootstrap.memory_lock=true
    mem_limit: 1g
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -X GET http://es01:9200/_cluster/health?pretty | grep status | grep -q '\\(green\\|yellow\\)'"
        ]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 4
  
  
  ## NOTE:
  ## scichat-loopback is ESS specific microservice for logbook
  ## Discussion is needed to decide if this should be included in the e2e test
  ## If not, remove the following block and also .env.scichat-loopback.e2e in the same directory
  
  
  # scichat-loopback:
  #   image: "ghcr.io/scicatproject/scichat-loopback:latest"
  #   command:
  #     [
  #       "node",
  #       "-r",
  #       "dotenv/config",
  #       "."
  #     ]
  #   volumes:
  #     - "./CI/e2e/.env.scichat-loopback.e2e:/home/node/app/.env"
  #   depends_on:
  #     mongodb:
  #       condition: service_healthy

volumes:
  mongodb_data:
    driver: local
